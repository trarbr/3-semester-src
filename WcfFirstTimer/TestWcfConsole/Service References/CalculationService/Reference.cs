//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestWcfConsole.CalculationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculationService.ICalculationService")]
    public interface ICalculationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/DoWork", ReplyAction="http://tempuri.org/ICalculationService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/DoWork", ReplyAction="http://tempuri.org/ICalculationService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/IntegerAddition", ReplyAction="http://tempuri.org/ICalculationService/IntegerAdditionResponse")]
        int IntegerAddition(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/IntegerAddition", ReplyAction="http://tempuri.org/ICalculationService/IntegerAdditionResponse")]
        System.Threading.Tasks.Task<int> IntegerAdditionAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/IntegerSubtraction", ReplyAction="http://tempuri.org/ICalculationService/IntegerSubtractionResponse")]
        int IntegerSubtraction(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculationService/IntegerSubtraction", ReplyAction="http://tempuri.org/ICalculationService/IntegerSubtractionResponse")]
        System.Threading.Tasks.Task<int> IntegerSubtractionAsync(int x, int y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculationServiceChannel : TestWcfConsole.CalculationService.ICalculationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculationServiceClient : System.ServiceModel.ClientBase<TestWcfConsole.CalculationService.ICalculationService>, TestWcfConsole.CalculationService.ICalculationService {
        
        public CalculationServiceClient() {
        }
        
        public CalculationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public int IntegerAddition(int x, int y) {
            return base.Channel.IntegerAddition(x, y);
        }
        
        public System.Threading.Tasks.Task<int> IntegerAdditionAsync(int x, int y) {
            return base.Channel.IntegerAdditionAsync(x, y);
        }
        
        public int IntegerSubtraction(int x, int y) {
            return base.Channel.IntegerSubtraction(x, y);
        }
        
        public System.Threading.Tasks.Task<int> IntegerSubtractionAsync(int x, int y) {
            return base.Channel.IntegerSubtractionAsync(x, y);
        }
    }
}
